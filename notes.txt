Opening MySql [MariaDB]:
NOTE: cd means 'command'
FOR THIS DUAL COMPUTER SETUP AS OF 03/07/2022: Access the mysql db by typing cd xampp\mysql\bin. then type mysql.exe -u root, NOT -u root -p

Make sure that your sqlDB is already in the MariaDB. Set up your js.file (look at node-mysql files for reference), then run 'npm start' in git bash (run MySql from there)

If you are getting an err about your headers, make sure that your dao sql is upp to date with your primary sql, even the database name itself from the dbconfig file
-------------------------------------------------------------------------------
-	The -u in MySQL stands for user
-	The -p in MySQL stands for password
-	‘show tables’ shows tables created in Xampp
-	‘desc temp’ or ‘create tables’ shows layout of tables
-	‘create tables’ shows the ‘create’ statement
-	To create a table, use create table ‘table_name’(id int, ‘first_slot_name’, varchar(amount in numbers)  {variable character}, ‘second_slot_name’ varchar(amount in numbers));
-	To insert data into a table:
o	Inserting fields: alter table ‘table_name’ add ‘new_table_name’ ‘int’ or’ varchar(#)’;
o	Inserting data: insert into ‘table_name’( ‘values’ ({id of where to insert data}, {data_for_first_slot_in_tow}, {data_for_second_slot_in_row}));
o	Multiple inserts ex: ‘insert into directors(fname,lname) values (‘John’,‘Hughes’);’
-	The “select * from ‘table_name’” method shows all the info stored in to table name being called;
-	The ‘*’ indicates a column that you want to display from the table called. If left as just a ‘*’, it calls all the info from that table
-	The ‘where’ method after typing the ‘select * from ‘table_name’” is written in plain English. Just type ‘id,’ then the ‘=’ symbol, then the number of the element you want to find
-	To do auto increment: type ‘id int auto_increment’;
-	The ‘alter’ method modifies the table column called. Type: ‘alter table ‘table_name’ modify ‘column name’  (what_to_add) ‘primary_key’ <- the key to modify;
-	‘when using a ‘change’ statement, you have to call the column you are changing, then what you are changing it to. Type: ‘change;
-	Ctrl-C exits the MySQL program;
-	 The column slots are usually called ‘fields’;
-	The ‘set’ method changes the value of the column called followed by the id where you want to change the value. Leaving the id off changes the entire column to the new value
-	Type: update ‘table_name’ set ‘column_name’ = ‘value’ where id = ‘id_number’;

-	Data types: (table name followed by parameters, very much written like a function)
o	Create table people ( id int auto_increment primary key,
o	Fname varchar(20),
o	Lname varchar(20),
o	Ssn char(11),
o	Age tinyint,
o	);
-------------------------------------------------------------------------------

Character Data (used for discreet pieces of data, data broken down to its minimums)
------------------------------------------
Char is a fixed length;
Varchar is a variable length;

Always go up one in the data text to allow room foe expansion in tables
Text Data: (the numbers next to the text fields are bytes)
------------------------------
Tinytext: 225 bytes
Text: 65,535 bytes
Mediumtext: 16,777,215 bytes
Longtext: 4, 294, 967, 295 bytes

Numeric data:
(can be signed (allows both negative and positive numbers) or unsigned (allows only positive numbers)

------------------------------------------
            Signed			Unsigned 
Tinyint: 	-128 to 127		0 to 255
Smallint: 	-32k to 32k		0 to 65k
Mediumint	 -8mil to 8mil		0 to 16mil
Int 		-2bil to 2bil		0 to 4bil
Bigint 		-9quin to -9quin 	0 to 18qin

Temporal data: (dates and times)
--------------------------
Date		YYYY-MM-DD
dateTime 	YYYY-MM-DD HH:MI:SS
timestamp 	YYYY-MM-DD HH:MI:SS
year 		YYYY
time		HH:MI:SS
now()		current dateTime

floating point
---------------------
float(p,s) 1.E+38 p = how many digits total on the left and right 
                  s = how many digits on the right of the decimal

double(p,s) 1.E+308
decimal(p,s)

17.389
float(4,2)
17.39 // total(P) = 4 digits; on the right(S) = 2 digits; 

--ALL INFO BELOW IS CALLED A C.R.U.D

--CREATE 

INSERT INTO people (fname, lname) VALUES ('Bob', 'Jones');

-- READ (This is typically first)

SELECT * FROM people;

--UPDATE 

UPDATE people set phone='601-321-7654', gender='M' WHERE fname='Bob';

--DELETE

DELETE from people WHERE fname = 'Bob';

USE 'select 'column_name' from 'table_name' order by 'column_name'' to get a list of things in a certain column in an ordered format

Orphan data: something deleted from the database that has no more relation to the table (NEEDS TO BE PREVENTED)

Adding a 'deleted_at' column helps with keeping data that may have been accidentally deleted